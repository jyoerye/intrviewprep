 [[0, 0, 0],              countPositiveValuesPrevRow = -1
 [0, 0, 0],                 countPositiveValuesCurrRow = 2
 [1, 2, 0], <---row count = 2 
 [0, 3, 4], 
 [0, 0, 0], 
 [0, 0, 0], 
 [5, 6, 7], 
 [8, 0, 9], 
 [10, 0, 0]]

int countPositiveValuesPrevRow = -1; // count of positives in the previous row
int countPositiveValuesCurrRow = -1; // count of positives in the row we are counting right now
for(int i=0;i<m;i++){
  int countPositiveValues = 0;
  for(int j=0;j<m[0].length;j++){

    if(m[i][j]>0)
      countPositiveValues++;


/*
-- empty array / null ?
-- duplicate values?
-- is the input sorted?
-- are their negative numbers?

String
-- case sensitivity A==a
-- delimiter
-- empty , null
-- duplicated chars


Find the number of ways to slice an array into 2 non-empty subarrays such that the sum of left subarray is less than the sum of right subarray.


Example 1
Input
           
array = [ -1, 10,| -9,  2 ]
                          
lsum = -1 + arr[i]
rsum = sum(arr from index 1 to end) = 3 - arr[i]





Output
2
left [-1], right [10, -9, 2]:  left sum -1 < right sum 3
left [-1, 10], right [-9, 2]: 
left [-1, 10, -9], right [2]:  left sum 0 < right sum 2


Example 2
Input
array = [1, 2, 3, 4, 5]


Output
3


 */

import java.io.*;
import java.util.*;


class Solution {


  int count(int[] nums) {

  }



  public static void main(String[] args) {
    ArrayList<String> strings = new ArrayList<String>();
    strings.add("Hello, World!");
    strings.add("Welcome to CoderPad.");
    strings.add("This pad is running Java " + Runtime.version().feature());

    for (String string : strings) {
      System.out.println(string);
    }
  }
}
